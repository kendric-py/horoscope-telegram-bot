from aiogram.types.inline_keyboard_button import InlineKeyboardButton
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery
from aiogram.types.input_file import FSInputFile

from aiogram.dispatcher.filters.content_types import ContentTypesFilter
from aiogram import Router

from pathes.telegram.filters.admin_filters import IsAdmin

import copy
import time

from .states import Mailing, Chanel, CreateReferal, SearchReferal
from .mailing_system import Core
from . import keyboards as nav
from loader import bot, db

ml = Core()
admin_router = Router()


async def open_menu(message: Message):
    await message.answer(
        '<b>‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>',
        reply_markup=nav.render_menu()
    )


async def cancel_action(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        '<b>‚öôÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>',
        reply_markup=nav.render_menu()
    )


async def open_stats_menu(call: CallbackQuery):
    count_users = await db.get_count_users()
    try:
        await call.message.edit_text(
            f'<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{count_users}</code>\
            \n\n<b>üìà–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π/–ø—Ä–æ—à–ª–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ</b>\
            \n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:</b> <code>{ml.count_users}</code>\
            \n<b>–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫:</b> <code>{ml.count_succ_send}</code>\
            \n<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏:</b> <code>{ml.count_blocks}</code>\
            \n<b>–û—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:</b> <code>{ml.count_err_send}</code>',
            reply_markup=nav.render_stats_menu()
        )
    except TelegramBadRequest:
        await call.answer('üí° –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')


async def chanels_menu(call: CallbackQuery):
    chanels = await db.get_chanels()
    await call.message.edit_text(
        '<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —Å–¥–µ–ª–∞–π—Ç–µ –∫–ª–∏–∫ –ø–æ –Ω—É–∂–Ω–æ–º—É –∫–∞–Ω–∞–ª—É',
        reply_markup=nav.render_chanels_menu(chanels)
    )


async def start_add_chanel(call: CallbackQuery, state: FSMContext):
    await state.set_state(Chanel.wait_name)
    await call.message.edit_text(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞(–ö–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–æ–∂–µ–Ω–æ –ø—Ä–∏ –ø—Ä–æ—Å—å–±–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è)</b>',
        reply_markup=nav.render_cancel()
    )


async def asking_link_chanel(message: Message, state: FSMContext):
    await state.update_data(chanel_name = message.text)
    await state.set_state(Chanel.wait_link)
    await message.answer(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –Ω–µ–π</b>'
    )


async def asking_chanel_link(message: Message, state: FSMContext):
    await state.update_data(chanel_link = message.text)
    await state.set_state(Chanel.wait_telegram_id)
    await message.answer(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>ID</code> –∫–∞–Ω–∞–ª–∞</b>'
    )


async def create_chanel_record(message: Message, state: FSMContext):
    state_data = await state.get_data()
    await state.clear()
    await db.new_chanel(state_data['chanel_name'], state_data['chanel_link'], message.text)
    await message.answer(
        '<b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>',
        reply_markup=nav.render_back()
    )
    

async def delete_chanel(call: CallbackQuery):
    chanel_id = call.data.split('&')[3]
    await db.delete_chanel(chanel_id)
    await chanels_menu(call)



async def start_mailing(call: CallbackQuery, state: FSMContext):
    await state.set_state(Mailing.wait_content)
    await call.message.edit_text(
        '<b>üßæ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç</b>',
        reply_markup=nav.render_cancel()
    )


async def take_mailing_content(message: Message, state: FSMContext):
    await state.update_data(copy_message = message)
    await state.set_state(Mailing.wait_confirm)
    nested_keyboard = copy.deepcopy(message.reply_markup)
    if nested_keyboard:
        nested_keyboard.inline_keyboard.append([
            InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='admin&confirm_mailing'), 
            InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='admin&main')
        ])
    else: nested_keyboard = nav.render_confirm_mailing()
    await bot.copy_message(message.from_user.id, message.chat.id, message.message_id, reply_markup=nested_keyboard)


async def run_mailing(call: CallbackQuery, state: FSMContext):
    users, state_data = await db.get_users(), await state.get_data()
    await state.clear()
    await call.message.delete()
    await call.message.answer('<b>üü¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª</b>')
    await ml.run(state_data['copy_message'], users)


async def referal_menu(call: CallbackQuery):
    await call.message.edit_text(
        '<b>üìë –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é</b>',
        reply_markup=nav.render_referal()
    )


async def start_create_referal_code(call: CallbackQuery, state: FSMContext):
    await state.set_state(CreateReferal.wait_code)
    await call.message.edit_text(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥</b>'
    )


async def asking_message(message: Message, state: FSMContext):
    await state.set_state(CreateReferal.wait_message)
    await state.update_data(code=message.text)
    await message.answer(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ /start</b>'
    )


async def save_referal_code(message: Message, state: FSMContext):
    state_data = await state.get_data()
    await state.clear()
    referal_message = message.text if message.text != '0' else None
    await db.create_ref_code(state_data['code'], referal_message)
    await message.answer(
        '<b>üü¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</b>',
        reply_markup=nav.render_back()
    )


async def start_serach_referal_code(call: CallbackQuery, state: FSMContext):
    await state.set_state(SearchReferal.wait_code)
    await call.message.edit_text(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–µ–º—É</b>'
    )


async def show_search_result(message: Message, state: FSMContext):
    await state.clear()
    referal_code = await db.search_referal_code(message.text)
    if not(referal_code):
        await message.answer('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!', reply_markup=nav.render_back())
        return
    count_use = await db.get_count_use_referal_code(message.text)
    await message.answer(
        f'<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞–π–¥–µ–Ω!</b>\
        \n\n<b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{count_use}</code>\
        \n<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{referal_code.message}</code>',
        reply_markup=nav.render_back()
    )


async def upload_users(call: CallbackQuery):
    users_str = ''
    users = await db.get_users()
    for user in users:
        users_str += f'{user.telegram_id}\n'
    with open('data/cache/users', 'w') as file: file.write(users_str)
    file = FSInputFile('data/cache/users', 'users.txt')
    await call.message.answer_document(file)
    





#bind filters
admin_router.message.bind_filter(IsAdmin)

#register message handlers
admin_router.message.register(open_menu, commands='admin', is_admin=True)
admin_router.message.register(take_mailing_content, state=Mailing.wait_content) #–†–∞—Å—Å—ã–ª–∫–∞
admin_router.message.register(asking_link_chanel, state=Chanel.wait_name)
admin_router.message.register(asking_chanel_link, state=Chanel.wait_link)
admin_router.message.register(create_chanel_record, state=Chanel.wait_telegram_id)
admin_router.message.register(asking_message, state=CreateReferal.wait_code)
admin_router.message.register(save_referal_code, state=CreateReferal.wait_message)
admin_router.message.register(show_search_result, state=SearchReferal.wait_code)



#register callback handlers
admin_router.callback_query_handler.register(cancel_action, text='admin&cancel', state='*') #–û—Ç–º–µ–Ω–∞ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏—è
admin_router.callback_query_handler.register(start_mailing, text='admin&mailing') #–†–∞—Å—Å—ã–ª–∫–∞
admin_router.callback_query_handler.register(run_mailing, text='admin&confirm_mailing', state=Mailing.wait_confirm) # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
admin_router.callback_query_handler.register(open_stats_menu, text='admin&stats') #–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
admin_router.callback_query_handler.register(open_stats_menu, text='admin&refresh_stats') #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
admin_router.callback_query_handler.register(chanels_menu, text='admin&chanels') #chanels menu
admin_router.callback_query_handler.register(start_add_chanel, text='admin&chanel&add') #–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
admin_router.callback_query_handler.register(delete_chanel, text_startswith='admin&chanel&del&')
admin_router.callback_query_handler.register(referal_menu, text='admin&referal')
admin_router.callback_query_handler.register(start_create_referal_code, text='admin&referal&create')
admin_router.callback_query_handler.register(start_serach_referal_code, text='admin&referal&show')
admin_router.callback_query_handler.register(upload_users, text='admin&upload')






